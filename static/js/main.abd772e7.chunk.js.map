{"version":3,"sources":["App.js","index.js"],"names":["TodoApp","state","title","todos","selectedFilter","handleTitleChange","event","value","target","_this","setState","handleSubmit","preventDefault","addTodo","id","Date","getUTCMilliseconds","completed","todo","trim","prevState","concat","Object","toConsumableArray","handleDelete","filter","handleComplete","map","objectSpread","handleAllComplete","every","clearAllCompleted","_this2","this","_this$state","visibleTodos","react_default","a","createElement","className","onSubmit","placeholder","onChange","style","display","type","onClick","htmlFor","item","key","checked","length","href","some","React","Component","App","App_TodoApp","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.abd772e7.chunk.js","sourcesContent":["import React from 'react';\n\nconst App = () => <TodoApp />;\n\nclass TodoApp extends React.Component {\n  state = {\n    title: '',\n    todos: [],\n    selectedFilter: 'all',\n  };\n\n  handleTitleChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      title: value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    this.addTodo({\n      title: this.state.title,\n      id: new Date().getUTCMilliseconds(),\n      completed: false,\n    });\n\n    this.setState({\n      title: '',\n    });\n  };\n\n  addTodo = (todo) => {\n    if (!this.state.title.trim()) {\n      return;\n    }\n\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  };\n\n  handleDelete = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }));\n  };\n\n  handleComplete = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (todo.id === id\n        ? { ...todo, completed: !todo.completed }\n        : todo)),\n    }));\n  };\n\n  handleAllComplete = () => {\n    this.setState((prevState) => {\n      if (prevState.todos.every(todo => (todo.completed))) {\n        return {\n          todos: prevState.todos.map(todo => ({\n            ...todo,\n            completed: !todo.completed,\n          })),\n        };\n      }\n\n      return {\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: true,\n        })),\n      };\n    });\n  };\n\n  clearAllCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  render() {\n    const { todos, title, selectedFilter } = this.state;\n    const visibleTodos = todos.filter((todo) => {\n      if (selectedFilter === 'active') {\n        return !todo.completed;\n      }\n\n      if (selectedFilter === 'completed') {\n        return todo.completed;\n      }\n\n      return true;\n    });\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <form onSubmit={this.handleSubmit}>\n            <input\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              onChange={this.handleTitleChange}\n              value={title}\n            />\n          </form>\n        </header>\n\n        <section className=\"main\" style={{ display: 'block' }}>\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onClick={this.handleAllComplete}\n          />\n          { /* eslint-disable-next-line */ }\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <ul className=\"todo-list\">\n            {visibleTodos.map(item => (\n              <li\n                key={item.id}\n                className={item.completed ? 'completed' : ''}\n              >\n                <div className=\"view\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"toggle\"\n                    id={`todo-${item.id}`}\n                    checked={item.completed}\n                    onChange={() => this.handleComplete(item.id)}\n                  />\n                  { /* eslint-disable-next-line */ }\n                  <label htmlFor={`todo-${item.id}`}>\n                    {item.title}\n                  </label>\n                  <button\n                    type=\"button\"\n                    className=\"destroy\"\n                    onClick={() => this.handleDelete(item.id)}\n                  />\n                </div>\n              </li>\n\n            ))}\n          </ul>\n\n        </section>\n\n        <footer className=\"footer\" style={{ display: 'block' }}>\n          <span className=\"todo-count\">\n            {todos.filter(todo => !todo.completed).length}\n            {' '}\n            items left\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <a\n                href=\"#/\"\n                className={selectedFilter === 'all' ? 'selected' : ''}\n                onClick={() => this.setState({ selectedFilter: 'all' })}\n              >\n                All\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/active\"\n                className={selectedFilter === 'active' ? 'selected' : ''}\n                onClick={() => this.setState({ selectedFilter: 'active' })}\n              >\n                Active\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/completed\"\n                className={selectedFilter === 'completed' ? 'selected' : ''}\n                onClick={() => this.setState({ selectedFilter: 'completed' })}\n              >\n                Completed\n              </a>\n            </li>\n          </ul>\n          {visibleTodos.some(todo => todo.completed)\n            ? (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                style={{ display: 'block' }}\n                onClick={this.clearAllCompleted}\n              >\n                Clear completed\n              </button>\n            )\n            : null}\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}